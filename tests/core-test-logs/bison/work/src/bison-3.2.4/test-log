  GEN      public-submodule-commit
make  check-recursive
make[1]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4'
Making check in po
make[2]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4/po'
make[2]: Nothing to be done for 'check'.
make[2]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4/po'
Making check in runtime-po
make[2]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4/runtime-po'
make[2]: Nothing to be done for 'check'.
make[2]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4/runtime-po'
Making check in .
make[2]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4'
  GEN      doc/bison.help
make  examples/calc++/calc++ examples/c++/simple examples/c++/variant examples/c++/variant-11 examples/mfcalc/mfcalc examples/rpcalc/rpcalc ./tests/bison tests/atconfig tests/atlocal
make[3]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4'
  YACC     examples/calc++/parser.stamp
  CXX      examples/calc++/calc__-driver.o
  LEX      examples/calc++/scanner.cc
  CXX      examples/calc++/calc__-scanner.o
  CXX      examples/calc++/calc__-calc++.o
  CXX      examples/calc++/calc__-parser.o
  CXXLD    examples/calc++/calc++
  YACC     examples/c++/simple.cc
updating examples/c++/simple.output
updating examples/c++/simple.hh
  CXX      examples/c++/simple-simple.o
  CXXLD    examples/c++/simple
  YACC     examples/c++/variant.cc
updating examples/c++/variant.output
updating examples/c++/variant.hh
  CXX      examples/c++/variant-variant.o
  CXXLD    examples/c++/variant
  YACC     examples/c++/variant-11.cc
updating examples/c++/variant-11.output
updating examples/c++/variant-11.hh
  CXX      examples/c++/variant_11-variant-11.o
  CXXLD    examples/c++/variant-11
  YACC     examples/mfcalc/mfcalc.c
updating examples/mfcalc/mfcalc.output
updating examples/mfcalc/mfcalc.h
  CC       examples/mfcalc/mfcalc-mfcalc.o
  CCLD     examples/mfcalc/mfcalc
  YACC     examples/rpcalc/rpcalc.c
updating examples/rpcalc/rpcalc.output
updating examples/rpcalc/rpcalc.h
  CC       examples/rpcalc/rpcalc-rpcalc.o
  CCLD     examples/rpcalc/rpcalc
make[3]: 'tests/bison' is up to date.
make[3]: Nothing to be done for 'tests/atconfig'.
make[3]: 'tests/atlocal' is up to date.
make[3]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4'
make  check-TESTS check-local
make[3]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4'
make[4]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4'
PASS: examples/mfcalc/mfcalc.test
PASS: examples/rpcalc/rpcalc.test
PASS: examples/calc++/calc++.test
PASS: examples/c++/simple.test
PASS: examples/c++/variant.test
PASS: examples/c++/variant-11.test
============================================================================
Testsuite summary for GNU Bison 3.2.4
============================================================================
# TOTAL: 6
# PASS:  6
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
make[4]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4'
make  all-recursive
make[4]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4'
Making all in po
make[5]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4/po'
make[5]: Nothing to be done for 'all'.
make[5]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4/po'
Making all in runtime-po
make[5]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4/runtime-po'
make[5]: Nothing to be done for 'all'.
make[5]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4/runtime-po'
Making all in .
make[5]: Entering directory '/usr/ports/core/bison/work/src/bison-3.2.4'
  GEN      doc/bison.help
make[5]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4'
make[4]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4'
./tests/testsuite -C tests 
## --------------------------- ##
## GNU Bison 3.2.4 test suite. ##
## --------------------------- ##

Input Processing.

  1: Invalid number of arguments                     ok
  2: Invalid options                                 ok
  3: Invalid inputs                                  ok
  4: Invalid inputs with {}                          ok
  5: Invalid $n and @n                               ok
  6: Type Clashes                                    ok
  7: Unused values                                   ok
  8: Unused values before symbol declarations        ok
  9: Default %printer and %destructor redeclared     ok
 10: Per-type %printer and %destructor redeclared    ok
 11: Undefined symbols                               ok
 12: Unassociated types used for a printer or destructor ok
 13: Useless printers or destructors                 ok
 14: Unused values with default %destructor          ok
 15: Unused values with per-type %destructor         ok
 16: Incompatible Aliases                            ok
 17: Torturing the Scanner                           ok
 18: Typed symbol aliases                            ok
 19: Require 1.0                                     ok
 20: Require 3.2.4                                   ok
 21: Require 100.0                                   ok
 22: String aliases for character tokens             ok
 23: Symbols                                         ok
 24: Numbered tokens                                 ok
 25: Unclosed constructs                             ok
 26: %start after first rule                         ok
 27: %prec takes a token                             ok
 28: %prec's token must be defined                   ok
 29: Reject unused %code qualifiers                  ok
 30: Multiple %code                                  ok
 31: errors                                          ok
 32: %define, --define, --force-define               ok
 33: "%define" Boolean variables                     ok
 34: "%define" code variables                        ok
 35: "%define" keyword variables                     ok
 36: "%define" enum variables                        ok
 37: "%define" file variables                        ok
 38: "%define" backward compatibility                ok
 39: Unused api.pure                                 ok
 40: C++ namespace reference errors                  ok
 41: Bad character literals                          ok
 42: Bad escapes in literals                         ok
 43: LAC: Errors for %define                         ok
 44: -Werror combinations                            ok
 45: %name-prefix and api.prefix are incompatible    ok
 46: Redefined %union name                           ok
 47: Stray $ or @                                    ok
 48: Code injection                                  ok
 49: Deprecated directives                           ok
 50: Unput's effect on locations                     ok
 51: Non-deprecated directives                       ok
 52: Cannot type action                              ok

Named references tests.

 53: Tutorial calculator                             ok
 54: Undefined and ambiguous references              ok
 55: Misleading references                           ok
 56: Many kinds of errors                            ok
 57: Missing identifiers in brackets                 ok
 58: Redundant words in brackets                     ok
 59: Comments in brackets                            ok
 60: Stray symbols in brackets                       ok
 61: Redundant words in LHS brackets                 ok
 62: Factored LHS                                    ok
 63: Unresolved references                           ok
 64: $ or @ followed by . or -                       ok

Output file names.

 65: Output files:  -dv                              ok
 66: Output files:  -dv >&-                          ok
 67: Output files:  -dv -o foo.c                     ok
 68: Output files:  -dv -o foo.tab.c                 ok
 69: Output files:  -dv -g --xml -y                  ok
 70: Output files:  -dv -g --xml -o y.tab.c          ok
 71: Output files:  -dv -b bar                       ok
 72: Output files:  -dv -g -o foo.c                  ok
 73: Output files: %defines %verbose                 ok
 74: Output files: %defines %verbose %yacc           ok
 75: Output files: %defines %verbose %yacc           ok
 76: Output files: %file-prefix "bar" %defines %verbose  ok
 77: Output files: %output "bar.c" %defines %verbose %yacc  ok
 78: Output files: %file-prefix "baz" %output "bar.c" %defines %verbose %yacc  ok
 79: Output files: %defines %verbose                 ok
 80: Output files: %defines %verbose  -o foo.c       ok
 81: Output files:  --defines=foo.hpp -o foo.c++     ok
 82: Output files: %defines "foo.hpp" -o foo.c++     ok
 83: Output files:  -o foo.c++ --graph=foo.gph       ok
 84: Output files: %type <foo> useless --defines --graph --xml --report=all -Wall -Werror ok
 85: Output files: useless=--defines --graph --xml --report=all -Wall -Werror ok
 86: Output files: lalr1.cc                          ok
 87: Output files: lalr1.cc %verbose                 ok
 88: Output files: lalr1.cc %defines %verbose        ok
 89: Output files: lalr1.cc %verbose %locations      ok
 90: Output files: lalr1.cc %defines %verbose %locations  ok
 91: Output files: lalr1.cc %defines %verbose        ok
 92: Output files: lalr1.cc %defines %verbose %locations -o subdir/foo.cc ok
 93: Output files: lalr1.cc %defines %verbose %file-prefix "output_dir/foo"  ok
 94: Output files: lalr1.cc %defines %locations %verbose %file-prefix "output_dir/foo"  ok
 95: Output files: lalr1.cc %defines %locations api.location.file=none %require "3.2"  ok
 96: Output files: lalr1.cc %defines %locations api.location.file="foo.loc.hh" %require "3.2"  ok
 97: Output files: lalr1.cc %defines %locations api.location.file="$at_dir/foo.loc.hh" %require "3.2"  ok
 98: Conflicting output files:  --graph="foo.tab.c"  ok
 99: Conflicting output files: %defines "foo.output" -v ok
100: Conflicting output files: lalr1.cc %defines %locations --graph="location.hh" ok
101: Conflicting output files:  -o foo.y             ok
102: Output file name: `~!@#$%^&*()-=_+{}[]|\:;<>, .' ok
103: Output file name: (                             ok
104: Output file name: )                             ok
105: Output file name: #                             ok
106: Output file name: @@                            ok
107: Output file name: @{                            ok
108: Output file name: @}                            ok
109: Output file name: [                             ok
110: Output file name: ]                             ok
111: Graph with no conflicts                         ok
112: Graph with unsolved S/R                         ok
113: Graph with solved S/R                           ok
114: Graph with R/R                                  ok
115: Graph with reductions with multiple LAT         ok
116: Graph with a reduction rule both enabled and disabled ok

Skeleton Support.

117: Relative skeleton file names                    ok
118: Installed skeleton file names                   ok
119: Boolean=variables: invalid skeleton defaults    ok
120: Complaining during macro argument expansion     ok
121: Fatal errors make M4 exit immediately           ok
122: Fatal errors but M4 continues producing output  ok

Grammar Sets (Firsts etc.).

123: Nullable                                        ok
124: Broken Closure                                  ok
125: Firsts                                          ok
126: Accept                                          ok

Grammar Reduction.

127: Useless Terminals                               ok
128: Useless Nonterminals                            ok
129: Useless Rules                                   ok
130: Reduced Automaton                               ok
131: Underivable Rules                               ok
132: Empty Language                                  ok
133: no lr.type: Single State Split                  ok
134: lr.type=lalr: Single State Split                ok
135: lr.type=ielr: Single State Split                ok
136: lr.type=canonical-lr: Single State Split        ok
137: no lr.type: Lane Split                          ok
138: lr.type=lalr: Lane Split                        ok
139: lr.type=ielr: Lane Split                        ok
140: lr.type=canonical-lr: Lane Split                ok
141: no lr.type: Complex Lane Split                  ok
142: lr.type=lalr: Complex Lane Split                ok
143: lr.type=ielr: Complex Lane Split                ok
144: lr.type=canonical-lr: Complex Lane Split        ok
145: no lr.type: Split During Added Lookahead Propagation ok
146: lr.type=lalr: Split During Added Lookahead Propagation ok
147: lr.type=ielr: Split During Added Lookahead Propagation ok
148: lr.type=canonical-lr: Split During Added Lookahead Propagation ok
149: no lr.default-reduction                         ok
150: lr.default-reduction=most                       ok
151: lr.default-reduction=consistent                 ok
152: lr.default-reduction=accepting                  ok

Test reports.

153: Reports                                         ok

Conflicts.

154: Token declaration order                         ok
155: Token declaration order: literals vs. identifiers ok
156: Useless associativity warning                   ok
157: Useless precedence warning                      ok
158: S/R in initial                                  ok
159: %nonassoc and eof                               ok
160: parse.error=verbose and consistent errors: lr.type=ielr ok
161: parse.error=verbose and consistent errors: lr.type=ielr %glr-parser ok
162: parse.error=verbose and consistent errors: lr.type=ielr c++ ok
163: parse.error=verbose and consistent errors: lr.type=ielr java skipped (conflicts.at:553)
164: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=consistent ok
165: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=accepting ok
166: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
167: parse.error=verbose and consistent errors: lr.type=canonical-lr parse.lac=full ok
168: parse.error=verbose and consistent errors: lr.type=ielr parse.lac=full ok
169: parse.error=verbose and consistent errors:      ok
170: parse.error=verbose and consistent errors: %glr-parser ok
171: parse.error=verbose and consistent errors: lr.default-reduction=consistent ok
172: parse.error=verbose and consistent errors: lr.default-reduction=accepting ok
173: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
174: parse.error=verbose and consistent errors: parse.lac=full ok
175: parse.error=verbose and consistent errors: parse.lac=full lr.default-reduction=accepting ok
176: LAC: %nonassoc requires splitting canonical LR states ok
177: Unresolved SR Conflicts                         ok
178: Resolved SR Conflicts                           ok
179: %precedence suffices                            ok
180: %precedence does not suffice                    ok
181: Defaulted Conflicted Reduction                  ok
182: %expect not enough                              ok
183: %expect right                                   ok
184: %expect too much                                ok
185: %expect with reduce conflicts                   ok
186: %prec with user string                          ok
187: %no-default-prec without %prec                  ok
188: %no-default-prec with %prec                     ok
189: %default-prec                                   ok
190: Unreachable States After Conflict Resolution    ok
191: Solved conflicts report for multiple reductions in a state ok
192: %nonassoc error actions for multiple reductions in a state ok
193: %expect-rr non GLR                              ok
194: -W versus %expect and %expect-rr                ok

Sync Lines.

195: Prologue syncline                               ok
196: %union syncline                                 ok
197: %union name syncline                            ok
198: Postprologue syncline                           ok
199: Action syncline                                 ok
200: Epilogue syncline                               ok
201: %code top syncline                              ok
202: %destructor syncline                            ok
203: %printer syncline                               ok
204: syncline escapes: yacc.c                        ok
205: syncline escapes: glr.c                         ok
206: syncline escapes: lalr1.cc                      ok
207: syncline escapes: glr.cc                        ok
208: %no-lines: yacc.c                               ok
209: %no-lines: glr.c                                ok
210: %no-lines: lalr1.cc                             ok
211: %no-lines: glr.cc                               ok

Parser Headers.

212: Invalid CPP guards:  --defines=input/input.h    ok
213: Invalid CPP guards:  --defines=9foo.h           ok
214: Invalid CPP guards: %glr-parser --defines=input/input.h ok
215: Invalid CPP guards: %glr-parser --defines=9foo.h ok
216: export YYLTYPE                                  ok
217: Sane headers:                                   ok
218: Sane headers: %locations %debug                 ok
219: Sane headers: %glr-parser                       ok
220: Sane headers: %locations %debug %glr-parser     ok
221: Sane headers: api.pure                          ok
222: Sane headers: api.push-pull=both                ok
223: Sane headers: api.pure api.push-pull=both       ok
224: Sane headers: c++                               ok
225: Sane headers: %locations %debug c++             ok
226: Sane headers: c++ api.value.type=variant parse.assert ok
227: Sane headers: %locations c++ %glr-parser        ok
228: Several parsers                                 ok

User Actions.

229: Midrule actions                                 ok
230: Typed midrule actions                           ok
231: Implicitly empty rule                           ok
232: Invalid uses of %empty                          ok
233: Valid uses of %empty                            ok
234: Initial location: yacc.c                        ok
235: Initial location: yacc.c api.pure=full          ok
236: Initial location: yacc.c api.pure %parse-param { int x } ok
237: Initial location: yacc.c api.push-pull=both     ok
238: Initial location: yacc.c api.push-pull=both api.pure=full ok
239: Initial location: glr.c                         ok
240: Initial location: glr.c api.pure                ok
241: Initial location: lalr1.cc                      ok
242: Initial location: glr.cc                        ok
243: Initial location: yacc.c api.pure=full          ok
244: Initial location: yacc.c api.pure=full          ok
245: Location print: yacc.c                          ok
246: Location print: glr.c                           ok
247: Location print: lalr1.cc                        ok
248: Location print: glr.cc                          ok
249: Exotic Dollars                                  ok
250: Printers and Destructors                        ok
251: Printers and Destructors with union             ok
252: Printers and Destructors: %defines lalr1.cc     ok
253: Printers and Destructors with union: %defines lalr1.cc ok
254: Printers and Destructors: %glr-parser           ok
255: Printers and Destructors with union: %glr-parser ok
256: Default tagless %printer and %destructor        ok
257: Default tagged and per-type %printer and %destructor ok
258: Default %printer and %destructor for user-defined end token ok
259: Default %printer and %destructor are not for error or $undefined ok
260: Default %printer and %destructor are not for $accept ok
261: Default %printer and %destructor for midrule values ok
262: @$ in %initial-action implies %locations        ok
263: @$ in %destructor implies %locations            ok
264: @$ in %printer implies %locations               ok
265: Qualified $$ in actions: yacc.c                 ok
266: Qualified $$ in actions: glr.c                  ok
267: Qualified $$ in actions: lalr1.cc               ok
268: Qualified $$ in actions: glr.cc                 ok
269: Destroying lookahead assigned by semantic action ok
270: YYBACKUP                                        ok

Value type tests.

271: %union vs. api.value.type                       ok
272: %yacc vs. api.value.type=union                  ok
273: yacc.c api.value.type={double}                  ok
274: yacc.c api.value.type={double} %defines         ok
275: yacc.c api.value.type={variant}                 ok
276: yacc.c api.value.type={variant} %defines        ok
277: yacc.c api.value.type={struct foo}              ok
278: yacc.c api.value.type={struct foo} %defines     ok
279: yacc.c api.value.type={struct bar}              ok
280: yacc.c api.value.type={struct bar} %defines     ok
281: yacc.c api.value.type={union foo}               ok
282: yacc.c api.value.type={union foo} %defines      ok
283: yacc.c %union { float fval; int ival; };        ok
284: yacc.c %union { float fval; int ival; }; %defines ok
285: yacc.c %union foo { float fval; int ival; };    ok
286: yacc.c %union foo { float fval; int ival; }; %defines ok
287: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; ok
288: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
289: yacc.c api.value.type=union                     ok
290: yacc.c api.value.type=union %defines            ok
291: glr.c api.value.type={double}                   ok
292: glr.c api.value.type={double} %defines          ok
293: glr.c api.value.type={variant}                  ok
294: glr.c api.value.type={variant} %defines         ok
295: glr.c api.value.type={struct foo}               ok
296: glr.c api.value.type={struct foo} %defines      ok
297: glr.c api.value.type={struct bar}               ok
298: glr.c api.value.type={struct bar} %defines      ok
299: glr.c api.value.type={union foo}                ok
300: glr.c api.value.type={union foo} %defines       ok
301: glr.c %union { float fval; int ival; };         ok
302: glr.c %union { float fval; int ival; }; %defines ok
303: glr.c %union foo { float fval; int ival; };     ok
304: glr.c %union foo { float fval; int ival; }; %defines ok
305: glr.c api.value.union.name=foo; %union { float fval; int ival; }; ok
306: glr.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
307: glr.c api.value.type=union                      ok
308: glr.c api.value.type=union %defines             ok
309: lalr1.cc api.value.type={double}                ok
310: lalr1.cc api.value.type={double} %defines       ok
311: lalr1.cc api.value.type={variant}               ok
312: lalr1.cc api.value.type={variant} %defines      ok
313: lalr1.cc api.value.type={struct foo}            ok
314: lalr1.cc api.value.type={struct foo} %defines   ok
315: lalr1.cc api.value.type={struct bar}            ok
316: lalr1.cc api.value.type={struct bar} %defines   ok
317: lalr1.cc api.value.type={union foo}             ok
318: lalr1.cc api.value.type={union foo} %defines    ok
319: lalr1.cc %union { float fval; int ival; };      ok
320: lalr1.cc %union { float fval; int ival; }; %defines ok
321: lalr1.cc api.value.type=union                   ok
322: lalr1.cc api.value.type=union %defines          ok
323: lalr1.cc api.value.type=variant                 ok
324: lalr1.cc api.value.type=variant %defines        ok
325: lalr1.cc api.value.type=variant                 ok
326: lalr1.cc api.value.type=variant %defines        ok
327: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
328: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
329: lalr1.cc %code requires { #include <memory> } api.value.type=variant ok
330: lalr1.cc %code requires { #include <memory> } api.value.type=variant %defines ok
331: glr.cc api.value.type={double}                  ok
332: glr.cc api.value.type={double} %defines         ok
333: glr.cc api.value.type={variant}                 ok
334: glr.cc api.value.type={variant} %defines        ok
335: glr.cc api.value.type={struct foo}              ok
336: glr.cc api.value.type={struct foo} %defines     ok
337: glr.cc api.value.type={struct bar}              ok
338: glr.cc api.value.type={struct bar} %defines     ok
339: glr.cc api.value.type={union foo}               ok
340: glr.cc api.value.type={union foo} %defines      ok
341: glr.cc %union { float fval; int ival; };        ok
342: glr.cc %union { float fval; int ival; }; %defines ok
343: glr.cc api.value.type=union                     ok
344: glr.cc api.value.type=union %defines            ok
345: lalr1.cc: Named %union                          ok
346: glr.cc: Named %union                            ok

Simple LALR(1) Calculator.

347: Calculator                                      ok
348: Calculator %defines                             ok
349: Calculator %locations                           ok
350: Calculator %name-prefix "calc"                  ok
351: Calculator %verbose                             ok
352: Calculator %yacc                                ok
353: Calculator parse.error=verbose                  ok
354: Calculator api.pure=full %locations             ok
355: Calculator api.push-pull=both api.pure=full %locations  ok
356: Calculator parse.error=verbose %locations       ok
357: Calculator parse.error=verbose %locations %defines api.prefix={calc} %verbose %yacc  ok
358: Calculator parse.error=verbose %locations %defines %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc  ok
359: Calculator %debug                               ok
360: Calculator parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
361: Calculator parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
362: Calculator api.pure=full parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
363: Calculator api.push-pull=both api.pure=full parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
364: Calculator api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok

Simple GLR Calculator.

365: Calculator %glr-parser                          ok
366: Calculator %glr-parser %defines                 ok
367: Calculator %glr-parser %locations               ok
368: Calculator %glr-parser %name-prefix "calc"      ok
369: Calculator %glr-parser api.prefix={calc}        ok
370: Calculator %glr-parser %verbose                 ok
371: Calculator %glr-parser %yacc                    ok
372: Calculator %glr-parser parse.error=verbose      ok
373: Calculator %glr-parser api.pure %locations      ok
374: Calculator %glr-parser parse.error=verbose %locations  ok
375: Calculator %glr-parser parse.error=verbose %locations %defines %name-prefix "calc" %verbose %yacc  ok
376: Calculator %glr-parser %debug                   ok
377: Calculator %glr-parser parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
378: Calculator %glr-parser parse.error=verbose %debug %locations %defines api.prefix={calc} api.token.prefix={TOK_} %verbose %yacc  ok
379: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
380: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
381: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok

Simple LALR(1) C++ Calculator.

382: Calculator lalr1.cc %defines                    ok
383: Calculator C++                                  ok
384: Calculator C++ %locations                       ok
385: Calculator C++ %locations $NO_EXCEPTIONS_CXXFLAGS ok
386: Calculator C++ %locations api.location.type={Span}  ok
387: Calculator C++ %defines %locations parse.error=verbose %name-prefix "calc" %verbose %yacc  ok
388: Calculator C++ %locations parse.error=verbose api.prefix={calc} %verbose %yacc  ok
389: Calculator C++ %locations parse.error=verbose %debug %name-prefix "calc" %verbose %yacc  ok
390: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} %verbose %yacc  ok
391: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} api.token.prefix={TOK_} %verbose %yacc  ok
392: Calculator C++ %defines %locations parse.error=verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
393: Calculator C++ parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
394: Calculator C++ %defines %locations parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
395: Calculator C++ %defines %locations api.location.file=none  ok
396: Calculator C++ %defines %locations api.location.file="my-location.hh"  ok

Simple GLR C++ Calculator.

397: Calculator glr.cc                               ok
398: Calculator C++ %glr-parser                      ok
399: Calculator C++ %glr-parser %locations           ok
400: Calculator C++ %glr-parser %locations api.location.type={Span}  ok
401: Calculator C++ %glr-parser %defines parse.error=verbose %name-prefix "calc" %verbose %yacc  ok
402: Calculator C++ %glr-parser parse.error=verbose api.prefix={calc} %verbose %yacc  ok
403: Calculator C++ %glr-parser %debug               ok
404: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" %verbose %yacc  ok
405: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc  ok
406: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
407: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok

Torture Tests.

408: Big triangle                                    ok
409: Big horizontal                                  ok
410: Many lookahead tokens                           ok
411: Exploding the Stack Size with Alloca            ok
412: Exploding the Stack Size with Malloc            ok

Existing Grammars.

413: GNU AWK 3.1.0 Grammar: LALR(1)                  ok
414: GNU AWK 3.1.0 Grammar: IELR(1)                  ok
415: GNU AWK 3.1.0 Grammar: Canonical LR(1)          ok
416: GNU Cim Grammar: LALR(1)                        ok
417: GNU Cim Grammar: IELR(1)                        ok
418: GNU Cim Grammar: Canonical LR(1)                ok
419: GNU pic (Groff 1.18.1) Grammar: LALR(1)         ok
420: GNU pic (Groff 1.18.1) Grammar: IELR(1)         ok
421: GNU pic (Groff 1.18.1) Grammar: Canonical LR(1) ok

Regression tests.

422: Trivial grammars                                ok
423: YYSTYPE typedef                                 ok
424: Early token definitions with --yacc             ok
425: Early token definitions without --yacc          ok
426: Braces parsing                                  ok
427: Duplicate string                                ok
428: Rule Line Numbers                               ok
429: Mixing %token styles                            ok
430: Invalid inputs                                  ok
431: Invalid inputs with {}                          ok
432: Token definitions                               ok
433: Characters Escapes                              ok
434: Web2c Report                                    ok
435: Web2c Actions                                   ok
436: Dancer                                          ok
437: Dancer %glr-parser                              ok
438: Dancer lalr1.cc                                 ok
439: Expecting two tokens                            ok
440: Expecting two tokens %glr-parser                ok
441: Expecting two tokens lalr1.cc                   ok
442: Braced code in declaration in rules section     ok
443: String alias declared after use                 ok
444: Extra lookahead sets in report                  ok
445: Token number in precedence declaration          ok
446: parse-gram.y: LALR = IELR                       ok
447: parse.error=verbose and YYSTACK_USE_ALLOCA      ok
448: parse.error=verbose overflow                    ok
449: LAC: Exploratory stack                          ok
450: LAC: Memory exhaustion                          ok
451: Lex and parse params: yacc.c                    ok
452: Lex and parse params: glr.c                     ok
453: Lex and parse params: lalr1.cc                  ok
454: Lex and parse params: glr.cc                    ok
455: stdio.h is not needed                           ok

Push Parsing Tests

456: Memory Leak for Early Deletion                  ok
457: Multiple impure instances                       ok
458: Unsupported Skeletons                           ok

C++ Features.

459: C++ Locations Unit Tests                        ok
460: C++ Variant-based Symbols Unit Tests            ok
461: Multiple occurrences of $n and api.value.automove ok
462: Variants lalr1.cc                               ok
463: Variants lalr1.cc parse.assert                  ok
464: Variants lalr1.cc parse.assert api.value.automove ok
465: Variants lalr1.cc parse.assert %locations       ok
466: Variants lalr1.cc parse.assert %code {\n#define TWO_STAGE_BUILD\n} ok
467: Variants lalr1.cc parse.assert api.token.constructor ok
468: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} ok
469: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations ok
470: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations api.value.automove ok
471: Variants and Typed Midrule Actions              ok
472: Doxygen Public Documentation                    skipped (c++.at:777)
473: Doxygen Private Documentation                   skipped (c++.at:778)
474: Relative namespace references                   ok
475: Absolute namespace references                   ok
476: Syntactically invalid namespace references      ok
477: Syntax error discarding no lookahead            ok
478: Syntax error as exception                       ok
479: Exception safety with error recovery            ok
480: Exception safety without error recovery         ok
481: Exception safety with error recovery api.value.type=variant ok
482: Exception safety without error recovery api.value.type=variant ok
483: C++ GLR parser identifier shadowing             ok
484: Shared locations                                ok

Java Calculator.

485: Calculator                                      skipped (java.at:367)
486: Calculator %error-verbose                       skipped (java.at:367)
487: Calculator %locations                           skipped (java.at:367)
488: Calculator %error-verbose %locations            skipped (java.at:367)
489: Calculator %lex-param { InputStream is }        skipped (java.at:374)
490: Calculator %error-verbose %lex-param { InputStream is }  skipped (java.at:374)
491: Calculator %locations %lex-param { InputStream is }  skipped (java.at:374)
492: Calculator %error-verbose %locations %lex-param { InputStream is }  skipped (java.at:374)

Java Parameters.

493: Java parser class and package names             skipped (java.at:457)
494: Java parser class modifiers                     skipped (java.at:481)
495: Java parser class extends and implements        skipped (java.at:545)
496: Java %parse-param and %lex-param                skipped (java.at:565)
497: Java throws specifications                      skipped (java.at:717)
498: Java constructor init and init_throws           skipped (java.at:735)
499: Java value, position, and location types        skipped (java.at:760)
500: Java syntax error handling without error token  skipped (java.at:836)

Java Push Parsing Tests

501: Trivial Push Parser with api.push-pull verification skipped (javapush.at:203)
502: Trivial Push Parser with %initial-action        skipped (javapush.at:225)
503: Calc parser with api.push-pull both             skipped (javapush.at:591)
504: Calc parser with %locations %code lexer and api.push-pull both skipped (javapush.at:870)

C++ Type Syntax (GLR).

505: GLR: Resolve ambiguity, impure, no locations    ok
506: GLR: Resolve ambiguity, impure, locations       ok
507: GLR: Resolve ambiguity, pure, no locations      ok
508: GLR: Resolve ambiguity, pure, locations         ok
509: GLR: Merge conflicting parses, impure, no locations ok
510: GLR: Merge conflicting parses, impure, locations ok
511: GLR: Merge conflicting parses, pure, no locations ok
512: GLR: Merge conflicting parses, pure, locations  ok
513: GLR: Verbose messages, resolve ambiguity, impure, no locations ok

GLR Regression Tests

514: Badly Collapsed GLR States                      ok
515: Improper handling of embedded actions and dollar(-N) in GLR parsers ok
516: Improper merging of GLR delayed action sets     ok
517: Duplicate representation of merged trees        ok
518: User destructor for unresolved GLR semantic value ok
519: User destructor after an error during a split parse ok
520: Duplicated user destructor for lookahead        ok
521: Incorrectly initialized location for empty right-hand side in GLR ok
522: No users destructors if stack 0 deleted         ok
523: Corrupted semantic options if user action cuts parse ok
524: Undesirable destructors if user action cuts parse ok
525: Leaked semantic values if user action cuts parse ok
526: Incorrect lookahead during deterministic GLR    ok
527: Incorrect lookahead during nondeterministic GLR ok
528: Leaked semantic values when reporting ambiguity ok
529: Leaked lookahead after nondeterministic parse syntax error ok
530: Uninitialized location when reporting ambiguity ok
531: Missed %merge type warnings when LHS type is declared later ok
532: Ambiguity reports                               ok
533: Predicates                                      ok

## ------------- ##
## Test results. ##
## ------------- ##

510 tests were successful.
23 tests were skipped.
make[3]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4'
make[2]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4'
make[1]: Leaving directory '/usr/ports/core/bison/work/src/bison-3.2.4'
